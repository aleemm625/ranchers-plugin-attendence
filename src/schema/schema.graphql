enum ActivityStatus { # Corrected enum name and values
  IN_BRANCH
  OUT_BRANCH
  DELIVERY
  OTHER
}

input CreateRiderActivityInput {
  status: ActivityStatus!
  outBranchReason: String
}

type RiderStatusLog {
  startTime: DateTime
  endTime: DateTime
  reason: String!
}

type TotalDuration {
  totalInBranch: Float
  totalOutBranch: Float
  totalDeliveryDuration: Float
  totalOtherDuration: Float
}

type StatusType {
  status: ActivityStatus
  timestamp: DateTime
}

type Activity {
  _id: ID!
  riderId: ID!
  status: String!
  createdAt: Date!
  endedAt: Date
  outBranchReason: String
}

type Mutation {
  # Create and rider activity
  # upsertRiderActivity(input: CreateRiderActivityInput!): Activity!

  updateRiderStatus(status: String!): Activity!

  updateRiderOutBranchReason(
    activityId: ID!
    outBranchReason: String!
  ): Activity

  saveActivityData(
    activity: ActivityStatus # Updated to match corrected enum name
    time: DateTime
    duration: String
    reason: String
  ): Activity
}

type Query {
  getRiderActivity(id: ID!): Activity
  getRiderActivities(
    riderId: ID!
    startDate: String
    endDate: String
  ): [Activity]

  getAttendanceReport: [Activity] # Corrected spelling from getAttendenceReport to getAttendanceReport
}

# The complete schema
schema {
  query: Query
  mutation: Mutation
}

# enum OrderReportSortBy {
#   startTime
#   createdAt
#   updatedAt
# }
